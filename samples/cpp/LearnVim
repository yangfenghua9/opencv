			linux 命令：
			vim                   在命令行中输入vim,进入vim编辑器
			Esc                   退出i(插入)命令进行其他命令使用
			:sh                   进入shell命令行,运行完命令后ctrl+d退出又一次进入vim编辑继续编辑在shell命令下，

			运行ctral+l完毕清屏
			:set number或者：set nu             使编辑中的文件显示行号
			:set nonumber或者：set nonu         与上一条命令相反,不显示行号
			:help i                   查看插入命令帮助
			/Fedora                   查找Fedora字符
			:s /Fedora/Redhat         将Fedora字符替换为Redhat(仅仅替换在光标所在的行)
	:%s/ro../r                将ro..替换成r。.表示随意字符
	  :1,.s/redhat/fedora       .号表示当前行,即光标所在行 #将第1行到当前行(.)第一次出现的redhat字符取代为fedora
	  :1,.s/redhat/fedora/g     将第1行到当前行(.)全部出现的redhat字符取代为fedora,g
	  全局标志
	  :1,$s/redhat/fedora/g     $表示最后一行#将第1行到最后一行全部出现的redhat字符取代为fedora
	  :%s/redhat/fedora/g       同上一个命令
	  :%s/\/fedora/g            将第1行到最后一行全部出现的redhat字取代为fedora#字,而不是字符
	  :%s/ro/\r&/gc             %表示全文，s表示替换。ro替换为换行符。&表示之前要替换的字符ro。g表示一直替换不加g仅仅替换一个，c表示确认是否替换。

	  整句话意思是将ro替换成换行符后跟ro
	  :f                   #显示文件内容,状态等等#同ctrl+g命令
	  vi filename 表示编辑filename文件。假设不存在则创建该文件，假设在进入vi时没有指定文件名称能够进入后用":n filename"来指定文件名称。


	  :e!        放弃全部改动，不包括已保存的
	  :e         文件名称  打开指定文件
	  D          删除当前行光标后的全部字符
	  y与y$同样  表示复制本行光标開始到行末的字符
	  :w! 文件名称  将当前显示文本全部覆盖已存在的文件
	  :n,mw! 文件名称  将当前显示文本的第n到第m行强制写入指定文件
	  w    光标跳到下个单词的首
	  e    光标依次跳到单词末尾 
	  替换文本
	  cc   替换当前行
	  C与c$    替换当前行中从光标处到航模的全部字符
	  cw       假设光标在单词头部或中间，从光标处替换到单词尾部。假设光标在单词尾部。则替换尾字母
	  ce       假设光标在单词头部或中间。从光标处替换到单词尾部，假设光标在单词尾部，则替换从尾字母到下一个单词尾部
	  cb       假设光标在单词中间则从光标处替换到单词头部，假设光标在单词头部。则替换之前一个单词

	  缓冲区
	  缓冲区分为数字缓冲区和字母缓冲区
	  数字缓冲区：
	  每一次dd删除操作都把删除的内容存入一个数字缓冲区，1号缓冲区永远是近期一次的删除内容。每次删除操作会把1号缓冲区的内容存入2号缓冲区。2号存入3号中。依次类推。调用能够用命令"np(n代表1-9中的数字)
	  字母缓冲区：
	  字母缓冲区有26个，分别为a-z
	  命令"add表示删除本行。将本行存入a缓冲区。

	  调用能够用命令"ap

	  光标控制命令
	  命令                   光标移动
	  :向上               能够反复输入上一个命令
	  h                   向左移一个字符
	  j                   向下移一行
	  nj                  向下移动n行
	  k                   向上移一行
	  l                   向右移一个字符
	  gg或:1              移动到文件第一行
	  G                   移到文件的最后一行
	  w                   移到下一个字的开头
	  W                   移到下一个字的开头。忽略标点符号
	  e                   移到下一个字的结尾
	  E                   移到下一个字的结尾。忽略标点符号
	  b                   移到当前字或前一个字的开头
	  B                   移到前一个字的开头，忽略标点符号
	  L                   移到屏幕的最后一行
	  M                   移到屏幕的中间一行
	  H                   移到屏幕的第一行
	  (                       移到句子的开头
	  )                       移到句子的结尾
{                       移到段落的开头
}                       移到下一个段落的开头
0(数字), |                移到当前行的第一列
^                       移到当前行的第一个非空字符
$                       移到当前行的最后一个字符
+, Enter             移到下一行的第一个字符
-                       移到前一行的第一个非空字符
在 vi 中加入文本
命令                   插入动作
a                   在光标后插入文本
A                   在当前行尾插入文本
i                   在光标前插入文本
I                   在当前行前插入文本
o                   在当前行的下边插入新行
O                   在当前行的上边插入新行
s                   删除光标所在处字符，并进入插入模式
S                   删除光标所在的行。并进入插入模式
:r file             读入文件 file 内容，并插在当前行后
:nr file            读入文件 file 内容，并插在第 n 行后
Esc                 回到命令模式
在 vi 中删除文本
命令                   删除操作
x                   删除光标处的字符，向后删除
nx                  删除本行光标開始之后的n个字符，不包括其他行
X                   删除光标前的单词，向前删除
dl                  删除一个字符
dw                  删至下一个字的开头
daw                 删除当前单词
dnw或ndw            删除之后n个单词
dap                 删除一个段落
dG                  删除该光标行及之后直到文件结束
dd                  删除整行
ndd                 删除光标下n行
db                  删除光标前面的字
:n,md               删除n行到m行
d, d$               从光标处删除到行尾
d$                  从光标处删除到行尾
d,d^                从光标处删除到行首
d^                  从光标处删除到行首
改动 vi 文本
每一个命令前面的数字表示该命令反复的次数
命令                               替换操作
g~~                           光标所在行字母大写和小写反转
guu                           光标所在行字母变小写
gUU                           光标所在行字母变大写
gUaw                          把当前单词转换成大写
gUap                          把当前段落转换成大写
rchar                         用 char 替换当前字符
R text escape                 用 text 替换当前字符直到按下 Esc 键
stext escape                  用 text 取代当前字符
S 或 cctext escape            用 text 取代整行
cwtext escape                 将当前字改为 text
Ctext escape                  将当前行余下的改为 text
cG escape                     改动至文件的末尾
在 vi 中查找与替换
命令                               查找与替换操作
f字符                         在本行查找下一个字符
;                             移动到下一个用f查找的字符，与上面的f配合使用
,                             当移动到上一个f查找的字符。与;相反
*                             全文查找移动到和光标当前的单词一样的下一个单词
/text                         在文件里向前查找 text
?text                         在文件里向后查找 text
n                             在同一方向反复查找
N                             在相反方向反复查找
:set ic                       查找时忽略大写和小写
:set noic                     查找时对大写和小写敏感
:ranges/pat1/pat2/g           用 newtext 替换 oldtext
:m,ns/oldtext/newtext         在 m 行通过 n。用 newtext 替换 oldtext
&                                  反复最后的 :s 命令
:g/text1/s/text2/text3        查找包括 text1 的行。用 text3 替换 text2
:g/text/command               在全部包括 text 的行运行 command 所表示的命令
:v/text/command               在全部不包括 text 的行运行 command 所表示的命令
在 vi 中复制文本
命令                      复制操作
yy                    将当前行的内容放入暂时缓冲区
nyy                   将 n 行的内容放入暂时缓冲区
p                     将暂时缓冲区中的文本放入光标后
P                     将暂时缓冲区中的文本放入光标前
np                    将暂时缓冲区中的文本放入光标后n次
nP                    将暂时缓冲区中的文本放入光标前n次
在 vi 中撤消与反复
命令               撤消操作
u               撤消上一步操作
U               撤消当前行的全部改动
ctrl+r          反复键入，和撤销相反
.                  反复最后一次改动
,                  以相反的方向反复前面的 f、F、t 或 T 查找命令
;                  反复前面的 f、F、t 或 T 查找命令
n               反复前面的 / 或 ? 查找命令
N               以相反方向反复前面的 / 或 ? 命令
保存文本和退出 vi
命令                      保存和/或退出操作
:w                    保存文件但不退出 vi
:w file               将改动保存在 file 中但不退出 vi
:wq 或 ZZ 或 :x         保存文件并退出 vi
:q!                   不保存文件，退出 vi
:e!                   放弃全部改动，从上次保存文件開始再编辑
:set go=              go表示gui option的缩写。等于空就是什么都没有
vim file1 file2...filen能够打开多个文件（在shell中输入的）
vim + filename                   进行文件最后一行进行编辑
vim +n filename                  进入文件第n行进行编辑
:e xx.txt             打开某文件
:open file            打开某文件，同上
:tabnew D:\text.txt 新选项卡中打开某文件，输入:tabnew D:\t再按tab，会自己主动补全text.txt。假设不正确再按几次tab，直到正确为止。
:bn                   文件切换，下一个文件
:bp                   文件切换。上一个文件
ctrl+6                文件切换，下一个文件
:split                多个文件上下排列，能够通过:q退出当前窗体
:vsplit               多个文件左右排列
vi 中的选项
选项                      作用
:set all              打印全部选项
:set nooption         关闭 option 选项
:set nu               每行前打印行号
:set showmode         显示是输入模式还是替换模式
:set autoindent          继承前一行的缩进方式。特别适用于多行凝视
:set smartindent        为C程序提供自己主动缩进
:set list             显示制表符(^I)和行尾符号
:set ts=8             为文本输入设置 tab stops
:set window=n         设置文本窗体显示 n 行
vi 的状态
选项                   作用
ctrl+g             显示文件名称、当前的行号、文件的总行数和文件位置的百分比
:l                 使用字母 "l" 来显示很多的特殊字符，如制表符和换行符
在文本中定位段落和放置标记
选项                      作用
{                         在第一列插入 { 来定义一个段落
	[[                         回到段落的开头处
		]]                         向前移到下一个段落的开头处
		在 vi 中连接行
		选项                      作用
		J                     将下一行连接到当前行的末尾
		nJ                    连接后面 n 行
		光标放置与屏幕调整
		选项                      作用
		H                     将光标移动到屏幕的顶行
		nH                    将光标移动到屏幕顶行下的第 n 行
		M                     将光标移动到屏幕的中间
		L                     将光标移动到屏幕的底行
		nL                    将光标移动到屏幕底行上的第 n 行
		ctrl+e                将屏幕下滚一行
		ctrl+u                将屏幕上滚半页
		ctrl+d                将屏幕下滚半页
		ctrl+b                将屏幕上滚一页
		ctrl+f                将屏幕下滚一页
		ctrl+o                退出插入模式进入普通模式，操作后又进入插入模式
		ctrl+p                编辑模式下自己主动补全
		zz                    重绘屏幕，使当前行移动是屏幕正中间
		z-return              将当前行置为屏幕的顶行
		nz-return             将当前行下的第 n 行置为屏幕的顶行
		z.                    将当前行置为屏幕的中央
		nz.                   将当前行上的第 n 行置为屏幕的中央
		z-                    将当前行置为屏幕的底行
		nz-                   将当前行上的第 n 行置为屏幕的底行
		:syntax on                语法高亮
		:syntax enable            语法高亮
		:syntax clear             取消高亮
		:color                color后加空格然后按table来切换配色方案
		:set hls              高亮查找的单词

		宏
		qa（q表示開始录制宏，宏的名字为a）
		再记录操作
		最好按q（表示宏录制结束）
		使用：@a,宏运行一次。

		6@a。表示运行6次宏a。

		vi 中的 shell 转义命令
		选项                      作用
		:!command             运行 shell 的 command 命令，如 :!ls
		:!!                         运行前一个 shell 命令
		:r!command            读取 command 命令的输入并插入。如 :r!ls 会先运行 ls。然后读入内容
		:w!command            将当前已编辑文件作为 command 命令的标准输入并运行 command 命令。如 :w!grep all
		:cd directory         将当前工作文件夹更改为 directory 所表示的文件夹
		:sh                   将启动一个子 shell。使用 ^d(ctrl+d) 返回 vi
		:so file              在 shell 程序 file 中读入和运行命令
		vi 中的宏与缩写
		(避免使用控制键和符号。不要使用字符 K、V、g、q、v、*、= 和功能键)
		选项                      作用
		:map key command_seq 定义一个键来运行 command_seq，如 :map e ea。不管什么时候都能够 e 移到一个字的末尾来追加文本
		:map                  在状态行显示全部已定义的宏
		:umap key             删除该键的宏
		:ab string1 string2   定义一个缩写，使得当插入 string1 时，用 string2 替换 string1。当要插入文本时，键入 string1 然后按 Esc 键，系统就插入了 string2
		:ab                   显示全部缩写
		:una string           取消 string 的缩写
		在 vi 中缩进文本
		选项                     作用
		ctrl+i或 tab       插入文本时。插入移动的宽度。移动宽度是事先定义好的
		:set ai            打开自己主动缩进
		:set sw=n          将移动宽度设置为 n 个字符
		>>                 使当前行向右移动一个宽度
		n>>                使 n 行都向右移动一个宽度，比如 3>> 就将接下来的三行每行都向右移动一个移动宽度。假设省略n表示使当前行向右移动一个宽度。


		>G                 使当前行至文档结尾都向右移动一个宽度

		可视模式
		为了便于选取文本。VIM 引入了可视(Visual)模式。

		要选取一段文本，首先将光标移到段首。在普通模式下按 v 进入可视模式。然后把光标移到段末选中内容（移到行首^,行末$）。须要注意。光标所在字符是包括在选区中的。

		这时能够对所选的文本进行一些操作，经常使用的(可视模式)命令有：
		x或d     剪切(即删除，同一时候所选的文本进入剪贴板) 
		y          复制 
		r字符     全部字符替换为新字符 
		u U ~    各自是全部字母变小写、变大写、反转大写和小写 
		当输入了命令以后。VIM 将回到普通模式，这时能够按 p 或 P 进行粘贴。普通模式下有关复制和粘贴的命令：
		v         进入可视模式 
		p或P    在当前位置粘贴剪贴板的内容，p 粘在光标所在字符后面，P 粘在前面 
		不得不承认，尽管引入了可视模式。复制和粘贴在 VIM 中仍然是比較麻烦的操作，这或许是 VIM 唯一的缺点。此外，VIM 还引入了选择(Select)模式。跟可视模式相似。

		结合一些键的定义和选项设置。


		【众安尊享e生】－国民百万医疗保险，投保详解及案例分析,每年最低112元——马云杀手锏
		posted @ 2015-12-23 13:42 mengfanrong 阅读(...) 评论(...) 编辑 收藏
		刷新评论刷新页面返回顶部
		公告

